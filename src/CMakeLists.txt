macro(add_library_export_header _TARGET)

    string(TOUPPER ${_TARGET} TARGET_UPPER)

    include(GenerateExportHeader)
    generate_export_header(${_TARGET}
        EXPORT_MACRO_NAME ${TARGET_UPPER}_DECLSPEC
        EXPORT_FILE_NAME ${Engine_BINARY_DIR}/include/${_TARGET}/Export.h
    )
    install(FILES ${Engine_BINARY_DIR}/include/${_TARGET}/Export.h DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${_TARGET})

    # pass the creation mode to the corresponding target in the cmake
    if(NOT BUILD_SHARED_LIBS)
        target_compile_definitions(${_TARGET} INTERFACE ${TARGET_UPPER}_STATIC_DEFINE)
    endif()
endmacro()

set(SOURCES
    KeyboardMap.cpp
    Window.cpp
    Viewer.cpp
)

set(HEADERS
    KeyboardMap.h
    Window.h
    Viewer.h
)
add_library(Engine ${SOURCES} ${HEADERS})
add_library(Engine::Engine ALIAS Engine)
set(Engine_FOUND TRUE CACHE INTERNAL "Engine found.")

target_include_directories(Engine
    PUBLIC
        $<BUILD_INTERFACE:${Engine_SOURCE_DIR}/src>
        $<INSTALL_INTERFACE:include>
)
target_link_libraries(Engine
    PUBLIC
        ${QT_PACKAGE_NAME}::Widgets
        vsg::vsg
)

add_library_export_header(Engine)

install(TARGETS Engine ${INSTALL_TARGETS_DEFAULT_FLAGS})

file(WRITE ${Engine_BINARY_DIR}/EngineConfig.cmake.in "#generated by cmake, do not change\ninclude(\${CMAKE_CURRENT_LIST_DIR}/EngineTargets.cmake)\n")
